# Stubs for delira.data_loading.sampler.sequential_sampler (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from delira.data_loading.dataset import AbstractDataset
from delira.data_loading.sampler.abstract_sampler import AbstractSampler
from typing import Any, Iterable, List, Union

class SequentialSampler(AbstractSampler):
    _indices: Any = ...
    def __init__(self, indices: Union[List[int], Iterable[int]]) -> None: ...
    def _get_indices(self, n_indices: int) -> List[int]: ...
    def __len__(self) -> int: ...

class PrevalenceSequentialSampler(AbstractSampler):
    _num_samples: Any = ...
    _indices: Any = ...
    _n_classes: Any = ...
    _global_idxs: Any = ...
    _shuffle: Any = ...
    def __init__(self, indices: Union[List[int], Iterable[int]], shuffle_batch: bool=...) -> None: ...
    @classmethod
    def from_dataset(cls: Any, dataset: AbstractDataset, **kwargs: Any) -> Any: ...
    def _get_indices(self, n_indices: int) -> List[int]: ...
    def __len__(self) -> int: ...

class StoppingPrevalenceSequentialSampler(AbstractSampler):
    _length: Any = ...
    _indices: Any = ...
    _n_classes: Any = ...
    _global_idxs: Any = ...
    _shuffle: Any = ...
    def __init__(self, indices: Union[List[int], Iterable[int]], shuffle_batch: bool=...) -> None: ...
    @classmethod
    def from_dataset(cls: Any, dataset: AbstractDataset) -> Any: ...
    def _check_batchsize(self, n_indices: int) -> int: ...
    def _get_indices(self, n_indices: int) -> List[int]: ...
    def __len__(self) -> int: ...
